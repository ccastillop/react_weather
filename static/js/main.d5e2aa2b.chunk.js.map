{"version":3,"sources":["components/DayWeather.js","components/App.js","serviceWorker.js","index.js"],"names":["Icon","props","code","alt","url","src","DayWeather","weather","dt","main","icon","description","temp_max","temp_min","day","Date","console","log","className","toLocaleString","weekday","timeStyle","App","getWeatherDays","state","isLoading","data","list","weatherUrl","fetch","this","then","response","json","setState","weathers","map","index","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uMAEA,SAASA,EAAKC,GAAO,IACZC,EAAaD,EAAbC,KAAMC,EAAOF,EAAPE,IACPC,EAAG,2CAAuCF,EAAvC,WACT,OACE,yBAAKG,IAAKD,EAAKD,IAAKA,IAwBTG,MApBf,SAAoBL,GAAQ,IAAD,EACKA,EAAMM,QAA5BC,EADiB,EACjBA,GAAIC,EADa,EACbA,KADa,IACPF,QACkB,GAA7BG,EAFkB,EAElBA,KAAMC,EAFY,EAEZA,YACNC,EAAsBH,EAAtBG,SAAUC,EAAYJ,EAAZI,SACXC,EAAM,IAAIC,KAAU,IAALP,GAErB,OADAQ,QAAQC,IAAIR,GAEV,yBAAKS,UAAU,oCACb,wBAAIA,UAAU,aACXJ,EAAIK,eAAe,KAAM,CAAEC,QAAQ,UACnCN,EAAIK,eAAe,KAAM,CAAEE,UAAW,WAEzC,kBAACrB,EAAD,CAAME,KAAMQ,EAAMP,IAAKQ,IACvB,2BACGE,EADH,UACiBD,EADjB,WC6BSU,E,kDA/Cb,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IAmBRsB,eAAgB,WACd,OAAG,EAAKC,MAAMC,UAAkB,GACjB,EAAKD,MAAME,KAAnBC,MApBP,EAAKH,MAAQ,CACXC,WAAW,EACXC,KAAM,IAER,EAAKE,WAAa,yHAND,E,gEASE,IAAD,OAClBC,MAAMC,KAAKF,YACRG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAL,GACJ,EAAKQ,SAAS,CACZR,KAAMA,EACND,WAAW,S,+BAajB,IAAMU,EAAWL,KAAKP,iBAEtB,OACE,yBAAKL,UAAU,8BACf,4BAAQA,UAAU,sCAAlB,kCAGCY,KAAKN,MAAMC,WAAa,uBAAGP,UAAU,eAAb,gBACvBY,KAAKN,MAAMC,WACX,yBAAKP,UAAU,uCACZiB,EAASC,KAAK,SAAC7B,EAAS8B,GAAV,OAAoB,kBAAC,EAAD,CAAYC,IAAKD,EAAO9B,QAASA,a,GAxC5DgC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,a","file":"static/js/main.d5e2aa2b.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Icon(props){\n  const {code, alt} = props\n  const url = `http://openweathermap.org/img/wn/${code}@2x.png`\n  return(\n    <img src={url} alt={alt} />\n  )\n}\n\nfunction DayWeather(props) {\n  const { dt, main, weather } = props.weather\n  const {icon, description} = weather[0]\n  const {temp_max, temp_min} = main\n  const day = new Date(dt * 1000)\n  console.log(main)\n  return(\n    <div className=\"text-center mr-2 mb-4 border p-2\">\n      <h4 className=\"font-bold\">\n        {day.toLocaleString(\"es\", { weekday:\"short\" })}\n        {day.toLocaleString(\"es\", { timeStyle: \"short\" })}\n      </h4>\n      <Icon code={icon} alt={description} />\n      <p>\n        {temp_min}ºC, {temp_max}ºC\n      </p>\n    </div>\n  )\n}\n\nexport default DayWeather\n","import React, { Component } from 'react'\nimport DayWeather from './DayWeather'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true,\n      data: {}\n    }\n    this.weatherUrl = \"http://api.openweathermap.org/data/2.5/forecast?id=3936456&appid=e8009a780395b8de3a5d94aee1ffaba9&units=metric&lang=es\"\n  }\n\n  componentDidMount() {\n    fetch(this.weatherUrl)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          data: data,\n          isLoading: false\n        })\n      })\n  }\n\n  getWeatherDays= () => {\n    if(this.state.isLoading) return []\n    const {list} = this.state.data\n    return list\n  }\n\n  render() {\n\n    const weathers = this.getWeatherDays()\n\n    return (\n      <div className=\"border border-gray m-4 p-4\">\n      <header className=\"font-bold text-xl text-center mb-4\">\n        Pronóstico de clima en Lima\n      </header>\n      {this.state.isLoading && <p className=\"text-center\">Cargando...</p> }\n      {!this.state.isLoading &&\n        <div className=\"flex flex-wrap justify-between mb-4\">\n          {weathers.map( (weather, index) => <DayWeather key={index} weather={weather} /> )}\n        </div>\n\n      }\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}